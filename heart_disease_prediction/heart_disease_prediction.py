# -*- coding: utf-8 -*-
"""Heart Disease Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_qK9hc_B0GLlg1jGhoraYsCSGawwC7Ir

Importing the Dependencies
"""

!pip install pandas
import pandas as pd

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Processing"""

# Loading the csv data to a Pandas DataFrame
heart_data = pd.read_csv('/content/heart (1).csv')

print(heart_data.head())

# Print first 5 rows of the dataset
heart_data.head()

# Print last 5 rows of the dataset
heart_data.tail()

# Number of rows and columns in a dataset
heart_data.shape

# Getting some info about the data
heart_data.info()

# Checking for misisng values
heart_data.isnull().sum()

# Statistical measure of the data
heart_data.describe()

# Checking the distribution of Target Variable
heart_data['target'].value_counts()

"""1 ---> Defective Heart


0 ---> Healthy Heart

Splitting the Features and Target
"""

X = heart_data.drop(columns = 'target', axis = 1)
Y = heart_data['target']

print(X)

print(Y)

"""Splitting the Data into Training data and Test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify = Y, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training

Logistic Regression
"""

model = LogisticRegression()

# Training the LogisticRegression model with Training data
model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# Accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

"""# New Section"""

print('Accuracy on Training data: ', training_data_accuracy)

# Accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on Test data: ', test_data_accuracy)

"""Building a Predictive System"""

input_data = (4, 62, 0, 0, 138, 294, 1, 1, 106, 0, 2.19, 1, 3)

# Change the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# Reshaping the numpy array as we are predicting for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0] == 0):
  print('The person does not have a Heart Disease.')
else:
  print('The person has a Heart Disease.')